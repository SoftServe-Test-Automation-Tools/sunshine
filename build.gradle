plugins {
    id "com.jfrog.bintray" version "1.8.4" apply false
    id "com.diffplug.gradle.spotless" version "3.25.0"
}

ext {
    GITHUB_URL = "https://github.com/tatools/sunshine"
    BINTRAY_ORG = "tatools"
}
repositories {
    mavenLocal()
    jcenter()
    mavenCentral()
}

spotless {
    apply plugin: 'java'
    format 'misc', {
        target '**/*.gradle', '**/*.md', '**/.gitignore'
        trimTrailingWhitespace()
        indentWithSpaces()
        endWithNewline()
    }
    java {
        removeUnusedImports()
        indentWithSpaces()
        trimTrailingWhitespace()
        endWithNewline()

        custom 'Lambda fix', { it.replace('} )', '})').replace('} ,', '},') }

        // use standard modifier order (JLS 4.8.7 Modifiers)
        // public protected private abstract static final transient volatile synchronized native strictfp
        replaceRegex 'Modifier order 1', '^(\\s*)((?:static)|(?:final)|(?:abstract))\\s+((public)|(protected)|(private))\\s', '$1$3 $2 '
        replaceRegex 'Modifier order 2', '^(\\s*)final\\s+static\\s+((public)|(protected)|(private))\\s', '$1$2 static final '
        replaceRegex 'Modifier order 3', '^(\\s*)static\\s+final\\s+((public)|(protected)|(private))\\s', '$1$2 static final '
        replaceRegex 'Modifier order 4', '^(\\s*((public)|(protected)|(private))?\\s*)\\sfinal\\s+static', '$1 static final'

        // remove empty lines before end of block (closing "}")
        replaceRegex 'Remove empty lines before end of block', '\\n[\\n]+(\\s*})(?=\\n)', '\n$1'

    }
    freshmark {
        target '**/*.md'
    }
}

subprojects {
    apply plugin: 'java'
    group 'org.tatools'
    version "${version}"
    sourceCompatibility = JavaVersion.VERSION_1_8

    repositories {
        mavenLocal()
        jcenter()
        mavenCentral()
    }
}
project(':sunshine-core') {
    apply from: rootProject.file('gradle/jacoco.gradle')
    apply from: rootProject.file('gradle/bintray.gradle')
    dependencies {
        compileOnly project(':sunshine-core-deps')
    }
}

project(':sunshine-junit4') {
    apply from: rootProject.file('gradle/jacoco.gradle')
    apply from: rootProject.file('gradle/bintray.gradle')
    dependencies {
        compile project(':sunshine-core')
    }
}

project(':sunshine-junit4-integration-tests') {
    dependencies {
        compile project(':sunshine-junit4')
    }
}

project(':sunshine-testng') {
    apply from: rootProject.file('gradle/jacoco.gradle')
    apply from: rootProject.file('gradle/bintray.gradle')
    dependencies {
        compile project(':sunshine-core')
    }
}

project(':sunshine-testng-integration-tests') {
    dependencies {
        compile project(':sunshine-testng')
    }
}

project(':sunshine-junit5') {
    apply from: rootProject.file('gradle/jacoco.gradle')
    apply from: rootProject.file('gradle/bintray.gradle')
    dependencies {
        compile project(':sunshine-core')
    }
}

project(':sunshine-junit5-integration-tests') {
    dependencies {
        compile project(':sunshine-junit5')
    }
}

defaultTasks 'clean', 'ready'

//task to write the version parameter given via command line into the "gradle.properties" files.
// Call with: gradle updateVersion -PnewVersion=1.0.1-SNAPSHOT
task('updateVersion') {
    if (project.hasProperty('newVersion')) {
        //set version in gradle settings
        project.version = project.newVersion
        project.subprojects?.each { it.version = project.version }

        //set version in all the gradle.properties files
        def file = new File('gradle.properties')
        if (file.getText().contains('version')) {
            new File(".").traverse(type: FileType.FILES, nameFilter: 'gradle.properties') {
                project.ant.replaceregexp(file: it, byline: true) {
                    key = 'version'
                    version = project.version
                    regexp(pattern: "^(\\s*)$key((\\s*[=|:]\\s*)|(\\s+)).+\$")
                    substitution(expression: "\\1$key\\2$version")
                }
            }
        } else {
            file.append('\nversion=' + project.version + '\n')
        }
        println 'Successfully changed project version in gradle.properties to \'' + project.version + '\''
    }
}
