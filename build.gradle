import groovy.io.FileType

plugins {
    id 'io.codearte.nexus-staging' version '0.9.0'
}

// configure "nexus-staging" plugin
nexusStaging {
    packageGroup = "io.github.tatools"
    delayBetweenRetriesInMillis = 60000
    username = sonatypeUsername
    password = sonatypePassword
}


subprojects {
    apply plugin: 'java'
    group 'io.github.tatools'
    version "${version}"
    sourceCompatibility = JavaVersion.VERSION_1_8

    repositories {
        mavenLocal()
        mavenCentral()
    }
}
project(':sunshine-core') {
    apply from: rootProject.file('gradle/jacoco.gradle')
    dependencies {
        compileOnly project(':sunshine-core-deps')
    }
}

project(':sunshine-junit4') {
    apply from: rootProject.file('gradle/jacoco.gradle')
    dependencies {
        compile project(':sunshine-core')
    }
}

project(':sunshine-junit4-integration-tests') {
    dependencies {
        compile project(':sunshine-junit4')
    }
}

project(':sunshine-testng') {
    apply from: rootProject.file('gradle/jacoco.gradle')
    dependencies {
        compile project(':sunshine-core')
    }
}

project(':sunshine-testng-integration-tests') {
    dependencies {
        compile project(':sunshine-testng')
    }
}

defaultTasks 'clean', 'ready'

//task to write the version parameter given via command line into the "gradle.properties" files.
// Call with: gradle updateVersion -PnewVersion=1.0.1-SNAPSHOT
task('updateVersion') << {
    if (project.hasProperty('newVersion')) {
        //set version in gradle settings
        project.version = project.newVersion
        project.subprojects?.each { it.version = project.version }

        //set version in all the gradle.properties files
        def file = new File('gradle.properties')
        if (file.getText().contains('version')) {
            new File(".").traverse(type: FileType.FILES, nameFilter: 'gradle.properties') {
                project.ant.replaceregexp(file: it, byline: true) {
                    key = 'version'
                    version = project.version
                    regexp(pattern: "^(\\s*)$key((\\s*[=|:]\\s*)|(\\s+)).+\$")
                    substitution(expression: "\\1$key\\2$version")
                }
            }
        } else {
            file.append('\nversion=' + project.version + '\n')
        }
        println 'Successfully changed project version in gradle.properties to \'' + project.version + '\''
    }
}
